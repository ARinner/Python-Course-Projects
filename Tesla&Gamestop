import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.io as pio
pio.renderers.default = "iframe"
import warnings
# Correctly ignore FutureWarnings
warnings.filterwarnings("ignore", category=FutureWarning)

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing=.3)
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False, height=900, title=stock, xaxis_rangeslider_visible=True)
    fig.show()
    from IPython.display import display, HTML
    fig_html = fig.to_html()
    display(HTML(fig_html))

# Create a Ticker object for Tesla
tesla = yf.Ticker("TSLA")

# Download Tesla stock data
tesla_data = tesla.history(period="max")

# Reset the index
tesla_data.reset_index(inplace=True)

# Display the first five rows
print(tesla_data.head())

# Download the webpage
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text

# Parse the HTML data
soup = BeautifulSoup(html_data, "html.parser")

# Extract all tables in the soup
tables = pd.read_html(str(soup))

# Find the Tesla Revenue table 
tesla_revenue = tables[1]

# Rename the columns to 'Date' and 'Revenue'
tesla_revenue.columns = ["Date", "Revenue"]

# Show first few rows to confirm
print(tesla_revenue.head())
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(r',|\$',"", regex=True) # Added regex to help aboid warning messages
tesla_revenue.dropna(inplace=True)

tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

print(tesla_revenue.tail())

# Gamestop Revenue Data
# Create a Ticker object for GameStop
gme = yf.Ticker("GME")

# Download GameStop stock data
gme_data = gme.history(period="max")

# Reset the index
gme_data.reset_index(inplace=True)

# Display the first five rows
print(gme_data.head())

# Download the webpage for GameStop Revenue
url_gme = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data_2 = requests.get(url_gme).text

# Parse the HTML data
soup_gme = BeautifulSoup(html_data_2, "html.parser")

# Extract all tables
tables_gme = pd.read_html(str(soup_gme))

# Find the GameStop Revenue table
gme_revenue = tables_gme[1]

# Rename the columns to 'Date' and 'Revenue'
gme_revenue.columns = ["Date", "Revenue"]

# Clean the Revenue column (remove commas and dollar signs)
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(r',|\$',"", regex=True)

# Drop any missing values or empty revenues
gme_revenue.dropna(inplace=True)
gme_revenue = gme_revenue[gme_revenue['Revenue'] != ""]

# Display the last 5 rows
print(gme_revenue.tail())

#  Plot Tesla Stock Graph
make_graph(tesla_data, tesla_revenue, 'Tesla')

# Plot Gamestop Stock Graph
make_graph(gme_data, gme_revenue, 'GameStop')
